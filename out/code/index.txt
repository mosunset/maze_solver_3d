9:I[5613,[],""]
a:I[1778,[],""]
b:I[4782,["250","static/chunks/250-aa9a8b92daefbd0e.js","185","static/chunks/app/layout-410609be337bd2af.js"],""]
c:I[3623,["250","static/chunks/250-aa9a8b92daefbd0e.js","489","static/chunks/app/template-7d5f61ce199b9987.js"],""]
d:I[5250,["250","static/chunks/250-aa9a8b92daefbd0e.js","185","static/chunks/app/layout-410609be337bd2af.js"],""]
2:T37d9,<span class="hljs-comment">/** &lt;a href=&quot;https://www.ugs.kochi-tech.ac.jp/260277p/maze_solver_3d/&quot;&gt; */</span>
Maze_Generation stage;
Ui ui;
Userinput userinput = <span class="hljs-keyword">new </span><span class="hljs-class title_">Userinput</span>();
Maze_ray2 maze_ray2;
Player player = <span class="hljs-keyword">new </span><span class="hljs-class title_">Player</span>();
<span class="hljs-keyword">void</span> <span class="hljs-title function_">settings</span>() {
<span class="bg-red-200">    </span><span class="hljs-built_in">size</span>(<span class="hljs-number">1024</span>, <span class="hljs-number">576</span>);
<span class="bg-red-200">    </span><span class="hljs-built_in">randomSeed</span>(<span class="hljs-number">1</span>);
<span class="bg-red-200">    </span><span class="hljs-comment">// 5以上の奇数</span>
<span class="bg-red-200">    </span>stage = <span class="hljs-keyword">new </span><span class="hljs-class title_">Maze_Generation</span>(<span class="hljs-number">17</span>);
<span class="bg-red-200">    </span>ui = <span class="hljs-keyword">new </span><span class="hljs-class title_">Ui</span>();
<span class="bg-red-200">    </span>maze_ray2 = <span class="hljs-keyword">new </span><span class="hljs-class title_">Maze_ray2</span>();
<span class="bg-red-200">    </span>maze_ray2.<span class="hljs-property">create_ray2</span>(stage.<span class="hljs-property">get_stage</span>());
<span class="bg-red-200">    </span>player.<span class="hljs-property">pos</span>.<span class="hljs-property">x</span> = <span class="hljs-number">29</span>;
<span class="bg-red-200">    </span>player.<span class="hljs-property">pos</span>.<span class="hljs-property">y</span> = <span class="hljs-number">45</span>;
}
<span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span>() {
<span class="bg-red-200">    </span><span class="hljs-comment">// translate(width / 2,height / 2);</span>
<span class="bg-red-200">    </span><span class="hljs-built_in">background</span>(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>);
}
<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;
<span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span>() {
<span class="bg-red-200">    </span><span class="hljs-built_in">background</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);
<span class="bg-red-200">    </span><span class="hljs-built_in">strokeWeight</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="hljs-comment">// 3D 描画順最背面</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// 表示について</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// stageの表示</span>
<span class="bg-red-200">    </span>ui.<span class="hljs-property">mini_maze</span>(stage.<span class="hljs-property">get_stage_anser</span>(),stage.<span class="hljs-property">get_distance</span>());
<span class="bg-red-200">    </span><span class="hljs-comment">// stageの線分情報の表示</span>
<span class="bg-red-200">    </span>ui.<span class="hljs-property">view_ray2</span>(maze_ray2.<span class="hljs-property">get_maze_ray2</span>());

<span class="bg-red-200">    </span><span class="hljs-built_in">stroke</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="hljs-built_in">strokeWeight</span>(<span class="hljs-number">16</span>);
<span class="bg-red-200">    </span><span class="hljs-built_in">point</span>(player.<span class="hljs-property">pos</span>.<span class="hljs-property">x</span>, player.<span class="hljs-property">pos</span>.<span class="hljs-property">y</span>);
<span class="bg-red-200">    </span><span class="hljs-keyword">if</span>(<span class="hljs-built_in">keyPressed</span> &amp;&amp; <span class="hljs-built_in">keyCode</span> == LEFT){
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>player.<span class="hljs-property">angle</span> -= <span class="hljs-literal">PI</span> / <span class="hljs-number">120</span>;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">if</span>(<span class="hljs-built_in">keyPressed</span> &amp;&amp; <span class="hljs-built_in">keyCode</span> == RIGHT){
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>player.<span class="hljs-property">angle</span> += <span class="hljs-literal">PI</span> / <span class="hljs-number">120</span>;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-type">float</span> fov = <span class="hljs-literal">PI</span> / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="hljs-type">float</span> centerAngle = player.<span class="hljs-property">angle</span>;
<span class="bg-red-200">    </span><span class="hljs-type">float</span> leftAngle = centerAngle - fov / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="hljs-type">float</span> rightAngle = centerAngle + fov / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="hljs-type">float</span> beamTotal = <span class="hljs-number">40</span>;
<span class="bg-red-200">    </span><span class="hljs-type">float</span> beamIndex = <span class="hljs-number">-1</span>;
<span class="bg-red-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">float</span> angle = leftAngle; angle &lt; rightAngle + <span class="hljs-number">0.01</span>; angle += fov / beamTotal) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>beamIndex++;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>Ray2 beam = <span class="hljs-keyword">new </span><span class="hljs-class title_">Ray2</span>(
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>player.<span class="hljs-property">pos</span>.<span class="hljs-property">copy</span>(),
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>(<span class="hljs-built_in">cos</span>(angle), <span class="hljs-built_in">sin</span>(angle)).<span class="hljs-property">mult</span>(<span class="hljs-number">100</span>)
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">stroke</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">strokeWeight</span>(<span class="hljs-number">2</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>Ray2 player_eye = <span class="hljs-keyword">new </span><span class="hljs-class title_">Ray2</span>(player.<span class="hljs-property">pos</span>.<span class="hljs-property">copy</span>(),<span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>(<span class="hljs-built_in">cos</span>(centerAngle), <span class="hljs-built_in">sin</span>(centerAngle)).<span class="hljs-property">mult</span>(<span class="hljs-number">20</span>));
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">line</span>(player_eye.<span class="hljs-property">begin</span>().<span class="hljs-property">x</span>, player_eye.<span class="hljs-property">begin</span>().<span class="hljs-property">y</span>, player_eye.<span class="hljs-property">end</span>().<span class="hljs-property">x</span>, player_eye.<span class="hljs-property">end</span>().<span class="hljs-property">y</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; maze_ray2.<span class="hljs-property">get_maze_ray2</span>().<span class="hljs-property">size</span>(); i++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>Ray2 wall = maze_ray2.<span class="hljs-property">get_maze_ray2</span>().<span class="hljs-property">get</span>(i);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>Vec2 hitPos = beam.<span class="hljs-property">intersection</span>(wall);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">if</span> (hitPos == <span class="hljs-literal">null</span>){
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">continue</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-comment">// stroke(255, 255, 0);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-comment">// strokeWeight(5);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-comment">// point(hitPos.x, hitPos.y);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>Vec2 viewRoot = <span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>(<span class="hljs-number">320</span>, <span class="hljs-number">180</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-type">float</span> wallDist = hitPos.<span class="hljs-property">sub</span>(beam.<span class="hljs-property">begin</span>()).<span class="hljs-property">mag</span>();
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-type">float</span> wallPerpDist = wallDist;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-type">float</span> lineHeight = <span class="hljs-number">2800</span> / wallPerpDist;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>Vec2 lineBegin = viewRoot.<span class="hljs-property">add</span>(<span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>(<span class="hljs-number">300</span> / beamTotal * beamIndex, -lineHeight / <span class="hljs-number">2</span>));
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>Vec2 lineEnd = lineBegin.<span class="hljs-property">add</span>(<span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>(<span class="hljs-number">0</span>, lineHeight));
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">stroke</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">strokeWeight</span>(<span class="hljs-number">5</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">line</span>(lineBegin.<span class="hljs-property">x</span>, lineBegin.<span class="hljs-property">y</span>, lineEnd.<span class="hljs-property">x</span>, lineEnd.<span class="hljs-property">y</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span>}




<span class="bg-red-200">    </span><span class="hljs-comment">// 表示について 最前面</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// 情報文字</span>
<span class="bg-red-200">    </span>ui.<span class="hljs-property">uptext</span>();
<span class="bg-red-200">    </span><span class="hljs-comment">// 難易度</span>
<span class="bg-red-200">    </span>ui.<span class="hljs-property">level</span>(stage.<span class="hljs-property">get_x</span>(),stage.<span class="hljs-property">get_y</span>(),stage.<span class="hljs-property">get_load</span>(),stage.<span class="hljs-property">get_distance</span>());
<span class="bg-red-200">    </span><span class="hljs-comment">// ui.uiupdate();</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// キー入力</span>
<span class="bg-red-200">    </span>ui.<span class="hljs-property">keyinputui</span>(userinput.<span class="hljs-property">get_key</span>());
}
<span class="hljs-keyword">void</span> <span class="hljs-built_in">keyPressed</span>() {
<span class="bg-red-200">    </span><span class="hljs-comment">// キーが押された瞬間の処理</span>
<span class="bg-red-200">    </span>userinput.<span class="hljs-property">keyin</span>(<span class="hljs-built_in">keyCode</span>);
}
<span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span>() {
<span class="bg-red-200">    </span>userinput.<span class="hljs-property">keyrelese</span>(<span class="hljs-built_in">keyCode</span>);
}
<span class="hljs-keyword">void</span> <span class="hljs-built_in">mouseDragged</span>() {
  player.<span class="hljs-property">pos</span>.<span class="hljs-property">x</span> = <span class="hljs-built_in">mouseX</span>;
  player.<span class="hljs-property">pos</span>.<span class="hljs-property">y</span> = <span class="hljs-built_in">mouseY</span>;
}
3:Tbdfa,<span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Arrays</span>;
<span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Collections</span>;
<span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Random</span>;
<span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Comparator</span>;
<span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">HashSet</span>;
<span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">PriorityQueue</span>;
<span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Objects</span>;
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Maze_Generation</span>{
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] stage;<span class="hljs-comment">//0:かべ 1:通路 2:スタート 3:ゴール</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] stage_anser;<span class="hljs-comment">//0:かべ 1:通路 2:スタート 3:ゴール 4:探索箇所 5:最短経路</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y;
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] start;
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] goal;
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> distance = <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> load = <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[][] dx = {{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>} ,{ - <span class="hljs-number">1</span>, <span class="hljs-number">-2</span>} ,{<span class="hljs-number">0</span>,<span class="hljs-number">0</span>} ,{<span class="hljs-number">0</span>,<span class="hljs-number">0</span>} };<span class="hljs-comment">//x軸のベクトル</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[][] dy = {{<span class="hljs-number">0</span>,<span class="hljs-number">0</span>} ,{<span class="hljs-number">0</span>,<span class="hljs-number">0</span>} ,{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>} ,{ - <span class="hljs-number">1</span>, <span class="hljs-number">-2</span>} };<span class="hljs-comment">//y軸のベクトル</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-title function_">Maze_Generation</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-title function_">initialize_stage</span>(x,  y);
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-title function_">Maze_Generation</span>(<span class="hljs-type">int</span> xy) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-title function_">initialize_stage</span>(xy,  xy);
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] <span class="hljs-title function_">get_stage</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> <span class="hljs-variable">this</span>.<span class="hljs-property">stage</span>;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] <span class="hljs-title function_">get_stage_anser</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> <span class="hljs-variable">this</span>.<span class="hljs-property">stage_anser</span>;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_distance</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> distance;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_x</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> x;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_y</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> y;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_load</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> load;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize_stage</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// 5未満のサイズや偶数では生成できない</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">5</span>) x = <span class="hljs-number">5</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (y &lt; <span class="hljs-number">5</span>) y = <span class="hljs-number">5</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) x++;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (y % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) y++;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">x</span> = x;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">y</span> = y;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">stage</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">int</span>[<span class="hljs-variable">this</span>.<span class="hljs-property">y</span>][<span class="hljs-variable">this</span>.<span class="hljs-property">x</span>];
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">stage_anser</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">int</span>[<span class="hljs-variable">this</span>.<span class="hljs-property">y</span>][<span class="hljs-variable">this</span>.<span class="hljs-property">x</span>];
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// 値の初期化</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable">this</span>.<span class="hljs-property">y</span>; i++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-variable">this</span>.<span class="hljs-property">x</span>; j++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">stage</span>[i][j] = <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// 迷路生成</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">start</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">int</span>[]{<span class="hljs-number">1</span>,<span class="hljs-number">1</span>};
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">goal</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">int</span>[]{<span class="hljs-variable">this</span>.<span class="hljs-property">y</span> - <span class="hljs-number">2</span>,<span class="hljs-variable">this</span>.<span class="hljs-property">x</span> - <span class="hljs-number">2</span>};
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">stage</span>[<span class="hljs-variable">this</span>.<span class="hljs-property">start</span>[<span class="hljs-number">0</span>]][<span class="hljs-variable">this</span>.<span class="hljs-property">start</span>[<span class="hljs-number">1</span>]] = <span class="hljs-number">1</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-title function_">generate_stage</span>(<span class="hljs-variable">this</span>.<span class="hljs-property">start</span>[<span class="hljs-number">0</span>], <span class="hljs-variable">this</span>.<span class="hljs-property">start</span>[<span class="hljs-number">1</span>]);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable">this</span>.<span class="hljs-property">y</span>; i++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-variable">this</span>.<span class="hljs-property">x</span>; j++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">stage_anser</span>[i][j] = <span class="hljs-variable">this</span>.<span class="hljs-property">stage</span>[i][j];
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">if</span> (<span class="hljs-variable">this</span>.<span class="hljs-property">stage</span>[i][j] == <span class="hljs-number">1</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span>load++;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-comment">// デバッグ用</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-comment">//print(this.stage[i][j]);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-comment">//println(&quot;&quot;);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// 迷路攻略</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-title function_">a_star</span>(<span class="hljs-variable">this</span>.<span class="hljs-property">start</span>,<span class="hljs-variable">this</span>.<span class="hljs-property">goal</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">stage</span>[<span class="hljs-variable">this</span>.<span class="hljs-property">start</span>[<span class="hljs-number">0</span>]][<span class="hljs-variable">this</span>.<span class="hljs-property">start</span>[<span class="hljs-number">1</span>]] = <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">stage</span>[<span class="hljs-variable">this</span>.<span class="hljs-property">goal</span>[<span class="hljs-number">0</span>]][<span class="hljs-variable">this</span>.<span class="hljs-property">goal</span>[<span class="hljs-number">1</span>]] = <span class="hljs-number">3</span>;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-comment">// 迷路生成 穴掘り法</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generate_stage</span>(<span class="hljs-type">int</span> ny,<span class="hljs-type">int</span> nx) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">ArrayList</span>&lt;Integer&gt; array = <span class="hljs-keyword">new </span><span class="hljs-class title_">ArrayList</span>&lt;Integer&gt;(Arrays.<span class="hljs-property">asList</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>Collections.<span class="hljs-property">shuffle</span>(array); <span class="hljs-comment">// ランダム方向</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : array) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">if</span> (ny + dy[i][<span class="hljs-number">1</span>] &lt; <span class="hljs-number">1</span> || ny + dy[i][<span class="hljs-number">1</span>] &gt;=  <span class="hljs-variable">this</span>.<span class="hljs-property">y</span>) { <span class="hljs-comment">//周りの壁</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">continue</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">if</span> (nx + dx[i][<span class="hljs-number">1</span>] &lt; <span class="hljs-number">1</span> || nx + dx[i][<span class="hljs-number">1</span>] &gt;=  <span class="hljs-variable">this</span>.<span class="hljs-property">x</span>) { <span class="hljs-comment">//周りの壁</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">continue</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">if</span> (stage[ny + dy[i][<span class="hljs-number">1</span>]][nx + dx[i][<span class="hljs-number">1</span>]] == <span class="hljs-number">1</span>) { <span class="hljs-comment">//2ます先</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">continue</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) { <span class="hljs-comment">//通路を掘る</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>stage[ny + dy[i][j]][nx + dx[i][j]] = <span class="hljs-number">1</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-title function_">generate_stage</span>(ny + dy[i][<span class="hljs-number">1</span>], nx + dx[i][<span class="hljs-number">1</span>]); <span class="hljs-comment">//掘った先のところに移動</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-comment">// A*アルゴリズム</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a_star</span>(<span class="hljs-type">int</span>[] start,<span class="hljs-type">int</span>[] end) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>Node startNode = <span class="hljs-keyword">new </span><span class="hljs-class title_">Node</span>(<span class="hljs-literal">null</span>, start[<span class="hljs-number">0</span>], start[<span class="hljs-number">1</span>]);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>startNode.<span class="hljs-property">setG</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>startNode.<span class="hljs-property">setH</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>startNode.<span class="hljs-property">setF</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>Node endNode = <span class="hljs-keyword">new </span><span class="hljs-class title_">Node</span>(<span class="hljs-literal">null</span>, end[<span class="hljs-number">1</span>], end[<span class="hljs-number">0</span>]);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>endNode.<span class="hljs-property">setG</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>endNode.<span class="hljs-property">setH</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>endNode.<span class="hljs-property">setF</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// 優先度付きキュー</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// 経路候補の保持</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>PriorityQueue&lt;Node&gt; openList = <span class="hljs-keyword">new </span><span class="hljs-class title_">PriorityQueue</span>&lt;Node&gt;(<span class="hljs-keyword">new </span><span class="hljs-class title_">Comparator</span>&lt;Node&gt;() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>@Override
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span>(Node n1, Node n2) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">return</span> Integer.<span class="hljs-property">compare</span>(n2.<span class="hljs-property">f</span>,n1.<span class="hljs-property">f</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>});
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// openList.add(5);        // 要素の追加</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// int highestPriority = openList.poll();// 要素の取得（最も優先度が高い要素を削除して取得）</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// int highestPriority = openList.peek();// 要素の取得（最も優先度が高い要素を削除せず取得）NoRemove</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// boolean containsElement = openList.contains(8);// 要素の存在確認</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// int queueSize = openList.size();// openListの要素の数</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// 重複を許さない</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// 計算済みノード</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>HashSet&lt;Node&gt; closedList = <span class="hljs-keyword">new </span><span class="hljs-class title_">HashSet</span>&lt;Node&gt;();
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// closedList.add(&quot;Apple&quot;); //要素の追加</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// closedList.remove(&quot;Banana&quot;); //要素の削除</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// boolean containsOrange = closedList.contains(&quot;Orange&quot;); //要素の存在確認</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// int setSize = closedList.size(); //要素の数</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>openList.<span class="hljs-property">add</span>(startNode);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">//Node out = null;</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">while</span>(!openList.<span class="hljs-property">isEmpty</span>()) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>Node currentNode = openList.<span class="hljs-property">poll</span>();
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>closedList.<span class="hljs-property">add</span>(currentNode);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-comment">//out = new Node(currentNode.getParent(),currentNode.getX(),currentNode.getY());</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">if</span> (currentNode.<span class="hljs-property">equals</span>(endNode)) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-title function_">reconstructPath</span>(currentNode);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">return</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">ArrayList</span>&lt;Node&gt; children = <span class="hljs-keyword">new </span><span class="hljs-class title_">ArrayList</span>&lt;Node&gt;();
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-type">int</span>[][] directions = {{<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>} , {<span class="hljs-number">0</span>, <span class="hljs-number">1</span>} , { - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>} , {<span class="hljs-number">1</span>, <span class="hljs-number">0</span>} };
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] direction : directions) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-comment">// ノードの位置を計算</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-type">int</span>[] nodePosition = {currentNode.<span class="hljs-property">getX</span>() + direction[<span class="hljs-number">0</span>], currentNode.<span class="hljs-property">getY</span>() + direction[<span class="hljs-number">1</span>]};
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-comment">// 移動不可能位置またはクローズリストにある場合は無視</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">if</span> (stage[nodePosition[<span class="hljs-number">1</span>]][nodePosition[<span class="hljs-number">0</span>]] != <span class="hljs-number">1</span> || closedList.<span class="hljs-property">contains</span>(<span class="hljs-keyword">new </span><span class="hljs-class title_">Node</span>(<span class="hljs-literal">null</span>, nodePosition[<span class="hljs-number">0</span>], nodePosition[<span class="hljs-number">1</span>]))) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-keyword">continue</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>Node newNode = <span class="hljs-keyword">new </span><span class="hljs-class title_">Node</span>(currentNode, nodePosition[<span class="hljs-number">0</span>], nodePosition[<span class="hljs-number">1</span>]);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>children.<span class="hljs-property">add</span>(newNode);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">for</span> (Node child : children) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>child.<span class="hljs-property">setG</span>((<span class="hljs-type">int</span>)(Math.<span class="hljs-property">pow</span>(child.<span class="hljs-property">getX</span>() - <span class="hljs-variable">this</span>.<span class="hljs-property">start</span>[<span class="hljs-number">1</span>], <span class="hljs-number">2</span>) + Math.<span class="hljs-property">pow</span>(child.<span class="hljs-property">getY</span>() - <span class="hljs-variable">this</span>.<span class="hljs-property">start</span>[<span class="hljs-number">0</span>], <span class="hljs-number">2</span>)));
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>child.<span class="hljs-property">setH</span>((<span class="hljs-type">int</span>)(Math.<span class="hljs-property">pow</span>(<span class="hljs-variable">this</span>.<span class="hljs-property">goal</span>[<span class="hljs-number">1</span>] - child.<span class="hljs-property">getX</span>(), <span class="hljs-number">2</span>) + Math.<span class="hljs-property">pow</span>(<span class="hljs-variable">this</span>.<span class="hljs-property">goal</span>[<span class="hljs-number">0</span>] - child.<span class="hljs-property">getY</span>(), <span class="hljs-number">2</span>)));
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>child.<span class="hljs-property">setF</span>(child.<span class="hljs-property">getG</span>() + child.<span class="hljs-property">getH</span>());
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">for</span> (Node openNode : openList) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-keyword">if</span> (openNode.<span class="hljs-property">equals</span>(child) &amp;&amp; child.<span class="hljs-property">getG</span>() &gt; openNode.<span class="hljs-property">getG</span>()) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="bg-indigo-200">    </span><span class="hljs-keyword">continue</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>openList.<span class="hljs-property">add</span>(child);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">stage_anser</span>[child.<span class="hljs-property">getY</span>()][child.<span class="hljs-property">getX</span>()] = <span class="hljs-number">4</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">//reconstructPath(out);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span>;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reconstructPath</span>(Node current) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">while</span>(current != <span class="hljs-literal">null</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>stage_anser[current.<span class="hljs-property">getY</span>()][current.<span class="hljs-property">getX</span>()] = <span class="hljs-number">5</span>; <span class="hljs-comment">// 最短経路に含まれるノードをマーク</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>current = current.<span class="hljs-property">getParent</span>();
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">distance</span>++;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// 最短経路を含んだ迷路を表示</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>stage_anser[<span class="hljs-variable">this</span>.<span class="hljs-property">start</span>[<span class="hljs-number">0</span>]][<span class="hljs-variable">this</span>.<span class="hljs-property">start</span>[<span class="hljs-number">1</span>]] = <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>stage_anser[<span class="hljs-variable">this</span>.<span class="hljs-property">goal</span>[<span class="hljs-number">0</span>]][<span class="hljs-variable">this</span>.<span class="hljs-property">goal</span>[<span class="hljs-number">1</span>]] = <span class="hljs-number">3</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable">this</span>.<span class="hljs-property">y</span>; i++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-variable">this</span>.<span class="hljs-property">x</span>; j++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-comment">//print(stage_anser[i][j]);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-comment">//println(&quot;&quot;);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-comment">// ノードクラス（迷路上のセルを表す）</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">private</span> Node parent;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x, y; <span class="hljs-comment">// representing the position as (x, y)</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> g; <span class="hljs-comment">// スタートからの移動コスト値</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> h; <span class="hljs-comment">// 仮に見積もったコスト値</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> f; <span class="hljs-comment">// 合計コスト</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span>(Node parent, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">parent</span> = parent;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">x</span> = x;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">y</span> = y;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">g</span> = <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">h</span> = <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">f</span> = <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">// Getters and setters for the fields</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getParent</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">return</span> parent;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParent</span>(Node parent) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">parent</span> = parent;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">return</span> x;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setX</span>(<span class="hljs-type">int</span> x) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">x</span> = x;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getY</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">return</span> y;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setY</span>(<span class="hljs-type">int</span> y) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">y</span> = y;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getG</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">return</span> g;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setG</span>(<span class="hljs-type">int</span> g) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">g</span> = g;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getH</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">return</span> h;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setH</span>(<span class="hljs-type">int</span> h) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">h</span> = h;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getF</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">return</span> f;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setF</span>(<span class="hljs-type">int</span> f) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">f</span> = f;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>@Override
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span>(<span class="hljs-built_in">Object</span> obj) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">if</span> (<span class="hljs-variable">this</span> == obj) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span> || <span class="hljs-title function_">getClass</span>() != obj.<span class="hljs-property">getClass</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>Node node = (Node) obj;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">return</span> x == node.<span class="hljs-property">x</span> &amp;&amp; y == node.<span class="hljs-property">y</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>@Override
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">return</span> Objects.<span class="hljs-property">hash</span>(x, y);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span>}
}
4:T6787,<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ui</span>{
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> margin = <span class="hljs-number">8</span>;
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> map_width = <span class="hljs-number">14</span>;
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-title function_">Ui</span>() {}
<span class="bg-red-200">    </span><span class="hljs-keyword">void</span> <span class="hljs-title function_">view_ray2</span>(<span class="hljs-built_in">ArrayList</span>&lt;Ray2&gt; walls) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">for</span> (Ray2 wall : walls) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">line</span>(wall.<span class="hljs-property">begin</span>().<span class="hljs-property">x</span>, wall.<span class="hljs-property">begin</span>().<span class="hljs-property">y</span>, wall.<span class="hljs-property">end</span>().<span class="hljs-property">x</span>, wall.<span class="hljs-property">end</span>().<span class="hljs-property">y</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uiupdate</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (<span class="hljs-built_in">mousePressed</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">stroke</span>(<span class="hljs-number">0</span>,<span class="hljs-number">150</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">150</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>} <span class="hljs-keyword">else</span>{
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">stroke</span>(<span class="hljs-number">255</span>,<span class="hljs-number">150</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">150</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uptext</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">String</span> uptext = <span class="hljs-string">&quot;FPS:&quot;</span> + <span class="hljs-built_in">nf</span>(<span class="hljs-built_in">frameRate</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>) + <span class="hljs-string">&quot; TIME:&quot;</span> + <span class="hljs-built_in">nf</span>(<span class="hljs-built_in">millis</span>() / <span class="hljs-number">1000.0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">text</span>(uptext , margin, margin * <span class="hljs-number">2</span>);
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-comment">// 平均Level40</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">level</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> load,<span class="hljs-type">int</span> distance) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">float</span> v = (<span class="hljs-type">float</span>) distance / (load) * <span class="hljs-number">100</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">String</span> level = <span class="hljs-string">&quot;level:&quot;</span> + <span class="hljs-built_in">nf</span>(v * load, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">text</span>(level , margin,x * map_width + margin * <span class="hljs-number">5</span>);
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mini_maze</span>(<span class="hljs-type">int</span>[][] stage,<span class="hljs-type">int</span> distance) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">int</span> x = stage.<span class="hljs-property">length</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">int</span> y = stage[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">strokeWeight</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">stroke</span>(<span class="hljs-number">150</span>,<span class="hljs-number">150</span>,<span class="hljs-number">150</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; y; i++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; x; j++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-comment">//0:かべ 1:通路 2:スタート 3:ゴール 4:探索箇所 5:最短経路</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">if</span> (stage[j][i] == <span class="hljs-number">0</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stage[j][i] == <span class="hljs-number">1</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">255</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stage[j][i] == <span class="hljs-number">2</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stage[j][i] ==  <span class="hljs-number">3</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stage[j][i] == <span class="hljs-number">4</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">100</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stage[j][i] == <span class="hljs-number">5</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-built_in">rect</span>(j * map_width + margin, i * map_width + margin * <span class="hljs-number">3</span>, map_width, map_width);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">strokeWeight</span>(<span class="hljs-number">1</span>);
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyinputui</span>(<span class="hljs-type">boolean</span>[] keys) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">int</span> key_margin = <span class="hljs-number">16</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">int</span> square = <span class="hljs-number">60</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">int</span> x1, y1, x2, y2, x3, y3;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">float</span> triangleSize = square / <span class="hljs-number">1.5</span> / <span class="hljs-number">2</span>; <span class="hljs-comment">// Adjust this to change the size of the triangle</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">int</span> fontsize = <span class="hljs-number">24</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">textSize</span>(fontsize);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">textAlign</span>(CENTER);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">strokeWeight</span>(<span class="hljs-number">1</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">stroke</span>(<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">color</span> activeColor = <span class="hljs-built_in">color</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">150</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">color</span> inactiveColor = <span class="hljs-built_in">color</span>(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">150</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (keys[<span class="hljs-number">0</span>]) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(activeColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>} <span class="hljs-keyword">else</span>{
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(inactiveColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">rect</span>(key_margin * <span class="hljs-number">2</span> + square, <span class="hljs-built_in">height</span> - key_margin * <span class="hljs-number">2</span> - square * <span class="hljs-number">2</span>, square, square); <span class="hljs-comment">// W</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>x1 = key_margin * <span class="hljs-number">2</span> + square + square / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>y1 = <span class="hljs-built_in">height</span> - key_margin * <span class="hljs-number">2</span> - square * <span class="hljs-number">2</span> + square / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">triangle</span>(x1, y1 - triangleSize, x1 - triangleSize, y1 + triangleSize, x1 + triangleSize, y1 + triangleSize);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">text</span>(<span class="hljs-string">&quot;W&quot;</span>,x1,y1 + fontsize / <span class="hljs-number">2.2</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (keys[<span class="hljs-number">1</span>]) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(activeColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>} <span class="hljs-keyword">else</span>{
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(inactiveColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">rect</span>(key_margin, <span class="hljs-built_in">height</span> - key_margin - square, square, square); <span class="hljs-comment">// A</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>x1 = key_margin + square / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>y1 = <span class="hljs-built_in">height</span> - key_margin - square + square / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">triangle</span>(x1 - triangleSize, y1, x1 + triangleSize, y1 - triangleSize, x1 + triangleSize, y1 + triangleSize);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">text</span>(<span class="hljs-string">&quot;A&quot;</span>,x1,y1 + fontsize / <span class="hljs-number">2.2</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (keys[<span class="hljs-number">2</span>]) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(activeColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>} <span class="hljs-keyword">else</span>{
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(inactiveColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">rect</span>(key_margin * <span class="hljs-number">2</span> + square, <span class="hljs-built_in">height</span> - key_margin - square, square, square); <span class="hljs-comment">// S</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>x1 = key_margin * <span class="hljs-number">2</span> + square + square / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>y1 = <span class="hljs-built_in">height</span> - key_margin - square + square / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">triangle</span>(x1, y1 + triangleSize, x1 - triangleSize, y1 - triangleSize, x1 + triangleSize, y1 - triangleSize);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">text</span>(<span class="hljs-string">&quot;S&quot;</span>,x1,y1 + fontsize / <span class="hljs-number">2.2</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (keys[<span class="hljs-number">3</span>]) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(activeColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>} <span class="hljs-keyword">else</span>{
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(inactiveColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">rect</span>(key_margin * <span class="hljs-number">3</span> + square * <span class="hljs-number">2</span>, <span class="hljs-built_in">height</span> - key_margin - square, square, square); <span class="hljs-comment">// D</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>x1 = key_margin * <span class="hljs-number">3</span> + square * <span class="hljs-number">2</span> + square / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>y1 = <span class="hljs-built_in">height</span> - key_margin - square + square / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">triangle</span>(x1 + triangleSize, y1, x1 - triangleSize, y1 - triangleSize, x1 - triangleSize, y1 + triangleSize);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">text</span>(<span class="hljs-string">&quot;D&quot;</span>,x1,y1 + fontsize / <span class="hljs-number">2.2</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (keys[<span class="hljs-number">4</span>]) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(activeColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>} <span class="hljs-keyword">else</span>{
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(inactiveColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">rect</span>(<span class="hljs-built_in">width</span> - square * <span class="hljs-number">3</span> - key_margin * <span class="hljs-number">3</span>, <span class="hljs-built_in">height</span> - key_margin - square, square, square); <span class="hljs-comment">// J</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>x1 = <span class="hljs-built_in">width</span> - square * <span class="hljs-number">3</span> - key_margin * <span class="hljs-number">3</span> + square / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>y1 = <span class="hljs-built_in">height</span> - key_margin - square + square / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">triangle</span>(x1 - triangleSize, y1, x1 + triangleSize, y1 - triangleSize, x1 + triangleSize, y1 + triangleSize);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">text</span>(<span class="hljs-string">&quot;J&quot;</span>,x1,y1 + fontsize / <span class="hljs-number">2.2</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (keys[<span class="hljs-number">5</span>]) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(activeColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>} <span class="hljs-keyword">else</span>{
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-built_in">fill</span>(inactiveColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">rect</span>(<span class="hljs-built_in">width</span> - square - key_margin, <span class="hljs-built_in">height</span> - key_margin - square, square, square); <span class="hljs-comment">// L</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>x1 = <span class="hljs-built_in">width</span> - square - key_margin + square / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>y1 = <span class="hljs-built_in">height</span> - key_margin - square + square / <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">triangle</span>(x1 + triangleSize, y1, x1 - triangleSize, y1 - triangleSize, x1 - triangleSize, y1 + triangleSize);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">fill</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">text</span>(<span class="hljs-string">&quot;L&quot;</span>,x1,y1 + fontsize / <span class="hljs-number">2.2</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">//リセット</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">fill</span>(inactiveColor);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">textSize</span>(<span class="hljs-number">16</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">textAlign</span>(LEFT);
<span class="bg-red-200">    </span>}
}
5:T2c00,<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Userinput</span>{
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> w, a, s, d; <span class="hljs-comment">// 移動</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> j, l; <span class="hljs-comment">// 視点左右</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-title function_">Userinput</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">w</span> = <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">a</span> = <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">s</span> = <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">d</span> = <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">j</span> = <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">l</span> = <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span>[] <span class="hljs-title function_">get_key</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> <span class="hljs-keyword">new </span><span class="hljs-class title_">boolean</span>[]{w,a,s,d,j,l};
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyin</span>(<span class="hljs-type">int</span> <span class="hljs-built_in">keyCode</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-title function_">switch</span> (<span class="hljs-built_in">keyCode</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;W&#x27;</span>:
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">w</span> = <span class="hljs-literal">true</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">break</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">a</span> = <span class="hljs-literal">true</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">break</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;S&#x27;</span>:
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">s</span> = <span class="hljs-literal">true</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">break</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">d</span> = <span class="hljs-literal">true</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">break</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;J&#x27;</span>:
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">j</span> = <span class="hljs-literal">true</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">break</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>:
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">l</span> = <span class="hljs-literal">true</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">break</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyrelese</span>(<span class="hljs-type">int</span> <span class="hljs-built_in">keyCode</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-title function_">switch</span> (<span class="hljs-built_in">keyCode</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;W&#x27;</span>:
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">w</span> = <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">break</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">a</span> = <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">break</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;S&#x27;</span>:
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">s</span> = <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">break</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">d</span> = <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">break</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;J&#x27;</span>:
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">j</span> = <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">break</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>:
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">l</span> = <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">break</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span>}
}
6:T357a,<span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">ArrayList</span>;
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Maze_ray2</span>{
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-title function_">Maze_ray2</span>() {}
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-built_in">ArrayList</span>&lt;Ray2&gt; maze_stage;
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] temp_stage;
<span class="bg-red-200">    </span><span class="hljs-comment">//0:かべ 1:通路 2:スタート 3:ゴール 4:探索箇所 5:最短経路</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create_ray2</span>(<span class="hljs-type">int</span>[][] stage) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">int</span> y = stage.<span class="hljs-property">length</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">int</span> x = stage[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>temp_stage = <span class="hljs-keyword">new </span><span class="hljs-class title_">int</span>[y][x];
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; x; j++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; y; i++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-type">int</span> currentCell = stage[i][j];
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-comment">// 自身が壁の場合 右に壁がある場合2桁目を1 下に…1桁目を1 それ以外0</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">if</span> (currentCell == <span class="hljs-number">0</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-comment">// 右</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-type">int</span> right = (j &lt; y - <span class="hljs-number">1</span>) ? stage[i][j + <span class="hljs-number">1</span>] : <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-comment">// 下</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-type">int</span> below = (i &lt; x - <span class="hljs-number">1</span>) ? stage[i + <span class="hljs-number">1</span>][j] : <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-comment">// 2進数の桁を更新</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-type">int</span> binaryRepresentation = <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span>binaryRepresentation |= (right == <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span>binaryRepresentation |= (below == <span class="hljs-number">0</span>) ? <span class="hljs-number">2</span> : <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-comment">// 更新した2進数を使ってます目を更新</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span>temp_stage[i][j] = binaryRepresentation;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>} <span class="hljs-keyword">else</span>{
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span>temp_stage[i][j] = <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>temp_stage[y - <span class="hljs-number">1</span>][j] = <span class="hljs-number">1</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>temp_stage[i][x - <span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>temp_stage[y - <span class="hljs-number">1</span>][x - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-comment">// print(temp_stage[i][j]);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-comment">// print(&quot;\n&quot;);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">ArrayList</span>&lt;Ray2&gt; walls = <span class="hljs-keyword">new </span><span class="hljs-class title_">ArrayList</span>&lt;Ray2&gt;();
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">int</span> margin = <span class="hljs-number">8</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">int</span> map_width = <span class="hljs-number">14</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; x; j++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; y; i++) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">if</span> (temp_stage[i][j] == <span class="hljs-number">2</span> || temp_stage[i][j] == <span class="hljs-number">3</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-comment">// print(i + 1,j + 1);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span>walls.<span class="hljs-property">add</span>(<span class="hljs-keyword">new </span><span class="hljs-class title_">Ray2</span>().<span class="hljs-property">with2p</span>(<span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>((i + <span class="hljs-number">1</span>) + (( -(map_width / <span class="hljs-number">2</span>) + margin) / <span class="hljs-number">14</span>),(j + <span class="hljs-number">1</span>) + <span class="hljs-number">0.2</span> + (( -(map_width / <span class="hljs-number">2</span>) + margin * <span class="hljs-number">3</span>) / <span class="hljs-number">14</span>)).<span class="hljs-property">mult</span>(<span class="hljs-number">14</span>), <span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>((i + <span class="hljs-number">2</span>) + (( -(map_width / <span class="hljs-number">2</span>) + margin) / <span class="hljs-number">14</span>),(j + <span class="hljs-number">1</span>) + <span class="hljs-number">0.2</span> + (( -(map_width / <span class="hljs-number">2</span>) + margin * <span class="hljs-number">3</span>) / <span class="hljs-number">14</span>)).<span class="hljs-property">mult</span>(<span class="hljs-number">14</span>)));
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">if</span> (temp_stage[i][j] == <span class="hljs-number">1</span> || temp_stage[i][j] == <span class="hljs-number">3</span>) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-comment">// print(i + 1,j + 1);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span>walls.<span class="hljs-property">add</span>(<span class="hljs-keyword">new </span><span class="hljs-class title_">Ray2</span>().<span class="hljs-property">with2p</span>(<span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>((i + <span class="hljs-number">1</span>) + (( -(map_width / <span class="hljs-number">2</span>) + margin) / <span class="hljs-number">14</span>),(j + <span class="hljs-number">1</span>) + <span class="hljs-number">0.2</span> + (( -(map_width / <span class="hljs-number">2</span>) + margin * <span class="hljs-number">3</span>) / <span class="hljs-number">14</span>)).<span class="hljs-property">mult</span>(<span class="hljs-number">14</span>), <span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>((i + <span class="hljs-number">1</span>) + (( -(map_width / <span class="hljs-number">2</span>) + margin) / <span class="hljs-number">14</span>),(j + <span class="hljs-number">2</span>) + <span class="hljs-number">0.2</span> + (( -(map_width / <span class="hljs-number">2</span>) + margin * <span class="hljs-number">3</span>) / <span class="hljs-number">14</span>)).<span class="hljs-property">mult</span>(<span class="hljs-number">14</span>)));
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-comment">// print(&quot;\n&quot;);</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>maze_stage = walls;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-built_in">ArrayList</span>&lt;Ray2&gt; <span class="hljs-title function_">get_maze_ray2</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> maze_stage;
<span class="bg-red-200">    </span>}
}
7:T1464,<span class="hljs-keyword">class</span> <span class="hljs-title class_">Ray2</span> {
  Vec2 pos, way;
  <span class="hljs-title function_">Ray2</span>(){}
  <span class="hljs-title function_">Ray2</span>(Vec2 pos, Vec2 way) {
<span class="bg-red-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">pos</span> = pos;
<span class="bg-red-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">way</span> = way;
  }
  Ray2 <span class="hljs-title function_">with2p</span>(Vec2 begin, Vec2 end) {
<span class="bg-red-200">    </span><span class="hljs-keyword">return</span> <span class="hljs-keyword">new </span><span class="hljs-class title_">Ray2</span>(begin, end.<span class="hljs-property">sub</span>(begin));
  }
  Vec2 <span class="hljs-title function_">begin</span>() {
<span class="bg-red-200">    </span><span class="hljs-keyword">return</span> <span class="hljs-variable">this</span>.<span class="hljs-property">pos</span>;
  }
  Vec2 <span class="hljs-title function_">end</span>() {
<span class="bg-red-200">    </span><span class="hljs-keyword">return</span> <span class="hljs-variable">this</span>.<span class="hljs-property">pos</span>.<span class="hljs-property">add</span>(<span class="hljs-variable">this</span>.<span class="hljs-property">way</span>);
  }
  Vec2 <span class="hljs-title function_">intersection</span>(Ray2 r2) {
<span class="bg-red-200">    </span>Ray2 r1 = <span class="hljs-variable">this</span>;
<span class="bg-red-200">    </span><span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(r1.<span class="hljs-property">way</span>.<span class="hljs-property">x</span>) &lt; <span class="hljs-number">0.01</span>)
<span class="bg-red-200">    </span>  r1.<span class="hljs-property">way</span>.<span class="hljs-property">x</span> = <span class="hljs-number">0.01</span>;
<span class="bg-red-200">    </span><span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(r2.<span class="hljs-property">way</span>.<span class="hljs-property">x</span>) &lt; <span class="hljs-number">0.01</span>)
<span class="bg-red-200">    </span>  r2.<span class="hljs-property">way</span>.<span class="hljs-property">x</span> = <span class="hljs-number">0.01</span>;
<span class="bg-red-200">    </span><span class="hljs-type">float</span> t1 = r1.<span class="hljs-property">way</span>.<span class="hljs-property">y</span> / r1.<span class="hljs-property">way</span>.<span class="hljs-property">x</span>;
<span class="bg-red-200">    </span><span class="hljs-type">float</span> t2 = r2.<span class="hljs-property">way</span>.<span class="hljs-property">y</span> / r2.<span class="hljs-property">way</span>.<span class="hljs-property">x</span>;
<span class="bg-red-200">    </span><span class="hljs-type">float</span> x1 = r1.<span class="hljs-property">pos</span>.<span class="hljs-property">x</span>;
<span class="bg-red-200">    </span><span class="hljs-type">float</span> x2 = r2.<span class="hljs-property">pos</span>.<span class="hljs-property">x</span>;
<span class="bg-red-200">    </span><span class="hljs-type">float</span> y1 = r1.<span class="hljs-property">pos</span>.<span class="hljs-property">y</span>;
<span class="bg-red-200">    </span><span class="hljs-type">float</span> y2 = r2.<span class="hljs-property">pos</span>.<span class="hljs-property">y</span>;
<span class="bg-red-200">    </span><span class="hljs-type">float</span> sx = (t1 * x1 - t2 * x2 - y1 + y2) / (t1 - t2);
<span class="bg-red-200">    </span><span class="hljs-type">float</span> sy = t1 * (sx - x1) + y1;
<span class="bg-red-200">    </span><span class="hljs-keyword">if</span> (
<span class="bg-red-200">    </span>  sx &gt; <span class="hljs-built_in">min</span>(r1.<span class="hljs-property">begin</span>().<span class="hljs-property">x</span>, r1.<span class="hljs-property">end</span>().<span class="hljs-property">x</span>) &amp;&amp;
<span class="bg-red-200">    </span>  sx &lt; <span class="hljs-built_in">max</span>(r1.<span class="hljs-property">begin</span>().<span class="hljs-property">x</span>, r1.<span class="hljs-property">end</span>().<span class="hljs-property">x</span>) &amp;&amp;
<span class="bg-red-200">    </span>  sx &gt; <span class="hljs-built_in">min</span>(r2.<span class="hljs-property">begin</span>().<span class="hljs-property">x</span>, r2.<span class="hljs-property">end</span>().<span class="hljs-property">x</span>) &amp;&amp;
<span class="bg-red-200">    </span>  sx &lt; <span class="hljs-built_in">max</span>(r2.<span class="hljs-property">begin</span>().<span class="hljs-property">x</span>, r2.<span class="hljs-property">end</span>().<span class="hljs-property">x</span>)
<span class="bg-red-200">    </span>) {
<span class="bg-red-200">    </span>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>(sx, sy);
<span class="bg-red-200">    </span>} <span class="hljs-keyword">else</span> {
<span class="bg-red-200">    </span>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
<span class="bg-red-200">    </span>}
  }
}
8:Tdcb,<span class="hljs-comment">// ベクトル</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Vec2</span> {
<span class="bg-red-200">    </span><span class="hljs-type">float</span> x, y;
<span class="bg-red-200">    </span><span class="hljs-title function_">Vec2</span>(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">x</span> = x;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">y</span> = y;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span>Vec2 <span class="hljs-built_in">add</span>(Vec2 b) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>Vec2 a = <span class="hljs-variable">this</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> <span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>(a.<span class="hljs-property">x</span> + b.<span class="hljs-property">x</span>, a.<span class="hljs-property">y</span> + b.<span class="hljs-property">y</span>);
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span>Vec2 <span class="hljs-title function_">sub</span>(Vec2 b) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>Vec2 a = <span class="hljs-variable">this</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> <span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>(a.<span class="hljs-property">x</span> - b.<span class="hljs-property">x</span>, a.<span class="hljs-property">y</span> - b.<span class="hljs-property">y</span>);
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span>Vec2 <span class="hljs-built_in">copy</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> <span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>(<span class="hljs-variable">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable">this</span>.<span class="hljs-property">y</span>);
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span>Vec2 <span class="hljs-title function_">mult</span>(<span class="hljs-type">float</span> s) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> <span class="hljs-keyword">new </span><span class="hljs-class title_">Vec2</span>(s * <span class="hljs-variable">this</span>.<span class="hljs-property">x</span>, s * <span class="hljs-variable">this</span>.<span class="hljs-property">y</span>);
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-type">float</span> <span class="hljs-built_in">mag</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">sq</span>(<span class="hljs-variable">this</span>.<span class="hljs-property">x</span>) + <span class="hljs-built_in">sq</span>(<span class="hljs-variable">this</span>.<span class="hljs-property">y</span>));
<span class="bg-red-200">    </span>}
}
0:["Y1615Io7fjgewIQ-xBKiy",[[["",{"children":["code",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",{"children":["code",{"children":["__PAGE__",{},["$L1",["$","div",null,{"children":[["$","div",null,{"className":"text-2xl mb-4","children":"コード一覧"}],[["$","details","file 1, maze.pde",{"children":[["$","summary",null,{"className":"mb-2 sm:-mb-4 text-xl group hover:underline ","children":["file 1, maze.pde",["$","span",null,{"className":"text-right inline-block w-full sm:-translate-y-7 groupe hover:underline","children":"クリックで開閉"}]]}],["$","div",null,{"children":["$","div",null,{"children":["$","pre",null,{"className":"mb-4 p-2 border rounded-lg overflow-x-auto border-gray-700","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$2"}}]}]}]}]]}],["$","details","file 2, maze_generation.pde",{"children":[["$","summary",null,{"className":"mb-2 sm:-mb-4 text-xl group hover:underline ","children":["file 2, maze_generation.pde",["$","span",null,{"className":"text-right inline-block w-full sm:-translate-y-7 groupe hover:underline","children":"クリックで開閉"}]]}],["$","div",null,{"children":["$","div",null,{"children":["$","pre",null,{"className":"mb-4 p-2 border rounded-lg overflow-x-auto border-gray-700","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$3"}}]}]}]}]]}],["$","details","file 3, ui.pde",{"children":[["$","summary",null,{"className":"mb-2 sm:-mb-4 text-xl group hover:underline ","children":["file 3, ui.pde",["$","span",null,{"className":"text-right inline-block w-full sm:-translate-y-7 groupe hover:underline","children":"クリックで開閉"}]]}],["$","div",null,{"children":["$","div",null,{"children":["$","pre",null,{"className":"mb-4 p-2 border rounded-lg overflow-x-auto border-gray-700","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$4"}}]}]}]}]]}],["$","details","file 4, userinput.pde",{"children":[["$","summary",null,{"className":"mb-2 sm:-mb-4 text-xl group hover:underline ","children":["file 4, userinput.pde",["$","span",null,{"className":"text-right inline-block w-full sm:-translate-y-7 groupe hover:underline","children":"クリックで開閉"}]]}],["$","div",null,{"children":["$","div",null,{"children":["$","pre",null,{"className":"mb-4 p-2 border rounded-lg overflow-x-auto border-gray-700","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$5"}}]}]}]}]]}],["$","details","file 5, player.pde",{"children":[["$","summary",null,{"className":"mb-2 sm:-mb-4 text-xl group hover:underline ","children":["file 5, player.pde",["$","span",null,{"className":"text-right inline-block w-full sm:-translate-y-7 groupe hover:underline","children":"クリックで開閉"}]]}],["$","div",null,{"children":["$","div",null,{"children":["$","pre",null,{"className":"mb-4 p-2 border rounded-lg overflow-x-auto border-gray-700","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Player</span> {\r\n<span class=\"bg-red-200\">    </span>Vec2 pos;\r\n<span class=\"bg-red-200\">    </span><span class=\"hljs-type\">float</span> angle;\r\n<span class=\"bg-red-200\">    </span><span class=\"hljs-title function_\">Player</span>() {\r\n<span class=\"bg-red-200\">    </span><span class=\"bg-pink-200\">    </span><span class=\"hljs-variable\">this</span>.<span class=\"hljs-property\">pos</span> = <span class=\"hljs-keyword\">new </span><span class=\"hljs-class title_\">Vec2</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\r\n<span class=\"bg-red-200\">    </span><span class=\"bg-pink-200\">    </span><span class=\"hljs-variable\">this</span>.<span class=\"hljs-property\">angle</span> = <span class=\"hljs-number\">0</span>;\r\n<span class=\"bg-red-200\">    </span>}\r\n}\r\n"}}]}]}]}]]}],["$","details","file 6, maze_ray2.pde",{"children":[["$","summary",null,{"className":"mb-2 sm:-mb-4 text-xl group hover:underline ","children":["file 6, maze_ray2.pde",["$","span",null,{"className":"text-right inline-block w-full sm:-translate-y-7 groupe hover:underline","children":"クリックで開閉"}]]}],["$","div",null,{"children":["$","div",null,{"children":["$","pre",null,{"className":"mb-4 p-2 border rounded-lg overflow-x-auto border-gray-700","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$6"}}]}]}]}]]}],["$","details","file 7, ray2.pde",{"children":[["$","summary",null,{"className":"mb-2 sm:-mb-4 text-xl group hover:underline ","children":["file 7, ray2.pde",["$","span",null,{"className":"text-right inline-block w-full sm:-translate-y-7 groupe hover:underline","children":"クリックで開閉"}]]}],["$","div",null,{"children":["$","div",null,{"children":["$","pre",null,{"className":"mb-4 p-2 border rounded-lg overflow-x-auto border-gray-700","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$7"}}]}]}]}]]}],["$","details","file 8, vec2.pde",{"children":[["$","summary",null,{"className":"mb-2 sm:-mb-4 text-xl group hover:underline ","children":["file 8, vec2.pde",["$","span",null,{"className":"text-right inline-block w-full sm:-translate-y-7 groupe hover:underline","children":"クリックで開閉"}]]}],["$","div",null,{"children":["$","div",null,{"children":["$","pre",null,{"className":"mb-4 p-2 border rounded-lg overflow-x-auto border-gray-700","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$8"}}]}]}]}]]}]]]}],null]]},[null,["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children","code","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/260277p/maze_solver_3d/_next/static/css/5c3da54741072322.css","precedence":"next","crossOrigin":""}]]}],null]]},[null,["$","html",null,{"lang":"ja","children":[["$","head",null,{"children":["$","$Lb",null,{}]}],["$","body",null,{"className":"__className_579ea0 relative flex min-h-screen flex-col","children":[["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{"children":["$","$La",null,{}]}],"templateStyles":[],"templateScripts":[],"notFound":["$","div",null,{"className":"text-center","children":[["$","h1",null,{"className":"block text-7xl font-bold text-gray-800 sm:text-9xl ","children":"404"}],["$","h1",null,{"className":"block text-2xl font-bold text-white"}],["$","p",null,{"className":"mt-3 text-gray-600 ","children":"おっと、何かがうまくいきませんでした。"}],["$","p",null,{"className":"text-gray-600 ","children":"申し訳ありませんが、ページが見つかりませんでした。"}],["$","div",null,{"className":"mt-5 flex flex-col items-center justify-center gap-2 sm:flex-row sm:gap-3","children":["$","$Ld",null,{"className":"inline-flex w-full items-center justify-center gap-x-2 rounded-lg border border-transparent px-4 py-3 text-sm font-semibold text-blue-600 hover:text-blue-800 disabled:pointer-events-none disabled:opacity-50 sm:w-auto ","href":"/","children":[["$","svg",null,{"className":"h-4 w-4 flex-shrink-0","xmlns":"http://www.w3.org/2000/svg","width":"24","height":"24","viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round","children":["$","path",null,{"d":"m15 18-6-6 6-6"}]}],"ホームに戻る"]}]}]]}],"notFoundStyles":[],"styles":null}],["$","footer",null,{"className":"mx-auto mt-auto w-full max-w-[85rem] border-t-2 border-gray-400 px-4 py-10 sm:px-6 lg:px-8","children":["$","div",null,{"className":"text-center","children":[["$","$Ld",null,{"href":"/","className":"mx-auto block max-w-fit p-3 text-xl font-semibold text-black","children":"Maze Solver 3D - 1260277"}],["$","div",null,{"className":"m-3 text-gray-500","children":["2024 高知工科大学 情報学群 浅野友哉 1260277.",["$","span",null,{"className":"pl-2","children":"|"}],["$","a",null,{"href":"https://github.com/mosunset/maze_solver_3d","target":"_blank","rel":"noopener noreferrer","className":"p-4 pl-2 font-semibold text-blue-600 transition hover:text-orange-400 hover:underline hover:underline-offset-1","children":"GitHub"}]]}]]}]}]]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/260277p/maze_solver_3d/_next/static/css/499bbea0d1092bb3.css","precedence":"next","crossOrigin":""}]],"$Le"]]]]
e:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Code | Maze Solver 3D - 1260277"}],["$","meta","3",{"name":"description","content":"情報科学応用最終課題説明ページ - Processingで作った3D迷路ゲームの解説"}],["$","link","4",{"rel":"icon","href":"/260277p/maze_solver_3d/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
