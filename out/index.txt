5:I[4782,["250","static/chunks/250-aa9a8b92daefbd0e.js","185","static/chunks/app/layout-82c99ce2ded23586.js"],""]
6:I[5613,[],""]
7:I[3623,["250","static/chunks/250-aa9a8b92daefbd0e.js","489","static/chunks/app/template-b9e11730037a0a05.js"],""]
8:I[1778,[],""]
9:I[5250,["250","static/chunks/250-aa9a8b92daefbd0e.js","185","static/chunks/app/layout-82c99ce2ded23586.js"],""]
2:Te2a,<span class="hljs-comment">// 迷路生成 穴掘り法</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generate_stage</span>(<span class="hljs-type">int</span> ny,<span class="hljs-type">int</span> nx) {
<span class="bg-red-200">    </span><span class="hljs-built_in">ArrayList</span>&lt;Integer&gt; array = <span class="hljs-keyword">new </span><span class="hljs-class title_">ArrayList</span>&lt;Integer&gt;(Arrays.<span class="hljs-property">asList</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));
<span class="bg-red-200">    </span>Collections.<span class="hljs-property">shuffle</span>(array); <span class="hljs-comment">// ランダム方向</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : array) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (ny + dy[i][<span class="hljs-number">1</span>] &lt; <span class="hljs-number">1</span> || ny + dy[i][<span class="hljs-number">1</span>] &gt;=  <span class="hljs-variable">this</span>.<span class="hljs-property">y</span>) { <span class="hljs-comment">//周りの壁</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">continue</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (nx + dx[i][<span class="hljs-number">1</span>] &lt; <span class="hljs-number">1</span> || nx + dx[i][<span class="hljs-number">1</span>] &gt;=  <span class="hljs-variable">this</span>.<span class="hljs-property">x</span>) { <span class="hljs-comment">//周りの壁</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">continue</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (stage[ny + dy[i][<span class="hljs-number">1</span>]][nx + dx[i][<span class="hljs-number">1</span>]] == <span class="hljs-number">1</span>) { <span class="hljs-comment">//2ます先</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">continue</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) { <span class="hljs-comment">//通路を掘る</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>stage[ny + dy[i][j]][nx + dx[i][j]] = <span class="hljs-number">1</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-title function_">generate_stage</span>(ny + dy[i][<span class="hljs-number">1</span>], nx + dx[i][<span class="hljs-number">1</span>]); <span class="hljs-comment">//掘った先のところに移動</span>
<span class="bg-red-200">    </span>}
}3:T30de,<span class="hljs-comment">// A*アルゴリズム</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a_star</span>(<span class="hljs-type">int</span>[] start,<span class="hljs-type">int</span>[] end) {
<span class="bg-red-200">    </span>Node startNode = <span class="hljs-keyword">new </span><span class="hljs-class title_">Node</span>(<span class="hljs-literal">null</span>, start[<span class="hljs-number">0</span>], start[<span class="hljs-number">1</span>]);
<span class="bg-red-200">    </span>startNode.<span class="hljs-property">setG</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span>startNode.<span class="hljs-property">setH</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span>startNode.<span class="hljs-property">setF</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span>Node endNode = <span class="hljs-keyword">new </span><span class="hljs-class title_">Node</span>(<span class="hljs-literal">null</span>, end[<span class="hljs-number">1</span>], end[<span class="hljs-number">0</span>]);
<span class="bg-red-200">    </span>endNode.<span class="hljs-property">setG</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span>endNode.<span class="hljs-property">setH</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span>endNode.<span class="hljs-property">setF</span>(<span class="hljs-number">0</span>);
<span class="bg-red-200">    </span><span class="hljs-comment">// 優先度付きキュー</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// 経路候補の保持</span>
<span class="bg-red-200">    </span>PriorityQueue&lt;Node&gt; openList = <span class="hljs-keyword">new </span><span class="hljs-class title_">PriorityQueue</span>&lt;Node&gt;(<span class="hljs-keyword">new </span><span class="hljs-class title_">Comparator</span>&lt;Node&gt;() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>@Override
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span>(Node n1, Node n2) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">return</span> Integer.<span class="hljs-property">compare</span>(n2.<span class="hljs-property">f</span>,n1.<span class="hljs-property">f</span>);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span>});
<span class="bg-red-200">    </span><span class="hljs-comment">// openList.add(5);        // 要素の追加</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// int highestPriority = openList.poll();// 要素の取得（最も優先度が高い要素を削除して取得）</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// int highestPriority = openList.peek();// 要素の取得（最も優先度が高い要素を削除せず取得）NoRemove</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// boolean containsElement = openList.contains(8);// 要素の存在確認</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// int queueSize = openList.size();// openListの要素の数</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// 重複を許さない</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// 計算済みノード</span>
<span class="bg-red-200">    </span>HashSet&lt;Node&gt; closedList = <span class="hljs-keyword">new </span><span class="hljs-class title_">HashSet</span>&lt;Node&gt;();
<span class="bg-red-200">    </span><span class="hljs-comment">// closedList.add(&quot;Apple&quot;); //要素の追加</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// closedList.remove(&quot;Banana&quot;); //要素の削除</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// boolean containsOrange = closedList.contains(&quot;Orange&quot;); //要素の存在確認</span>
<span class="bg-red-200">    </span><span class="hljs-comment">// int setSize = closedList.size(); //要素の数</span>
<span class="bg-red-200">    </span>openList.<span class="hljs-property">add</span>(startNode);
<span class="bg-red-200">    </span><span class="hljs-comment">//Node out = null;</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">while</span>(!openList.<span class="hljs-property">isEmpty</span>()) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>Node currentNode = openList.<span class="hljs-property">poll</span>();
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>closedList.<span class="hljs-property">add</span>(currentNode);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-comment">//out = new Node(currentNode.getParent(),currentNode.getX(),currentNode.getY());</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (currentNode.<span class="hljs-property">equals</span>(endNode)) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-title function_">reconstructPath</span>(currentNode);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">return</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-built_in">ArrayList</span>&lt;Node&gt; children = <span class="hljs-keyword">new </span><span class="hljs-class title_">ArrayList</span>&lt;Node&gt;();
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-type">int</span>[][] directions = {{<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>} , {<span class="hljs-number">0</span>, <span class="hljs-number">1</span>} , { - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>} , {<span class="hljs-number">1</span>, <span class="hljs-number">0</span>} };
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] direction : directions) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-comment">// ノードの位置を計算</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-type">int</span>[] nodePosition = {currentNode.<span class="hljs-property">getX</span>() + direction[<span class="hljs-number">0</span>], currentNode.<span class="hljs-property">getY</span>() + direction[<span class="hljs-number">1</span>]};
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-comment">// 移動不可能位置またはクローズリストにある場合は無視</span>
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">if</span> (stage[nodePosition[<span class="hljs-number">1</span>]][nodePosition[<span class="hljs-number">0</span>]] != <span class="hljs-number">1</span> || closedList.<span class="hljs-property">contains</span>(<span class="hljs-keyword">new </span><span class="hljs-class title_">Node</span>(<span class="hljs-literal">null</span>, nodePosition[<span class="hljs-number">0</span>], nodePosition[<span class="hljs-number">1</span>]))) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">continue</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>Node newNode = <span class="hljs-keyword">new </span><span class="hljs-class title_">Node</span>(currentNode, nodePosition[<span class="hljs-number">0</span>], nodePosition[<span class="hljs-number">1</span>]);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>children.<span class="hljs-property">add</span>(newNode);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">for</span> (Node child : children) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>child.<span class="hljs-property">setG</span>((<span class="hljs-type">int</span>)(Math.<span class="hljs-property">pow</span>(child.<span class="hljs-property">getX</span>() - <span class="hljs-variable">this</span>.<span class="hljs-property">start</span>[<span class="hljs-number">1</span>], <span class="hljs-number">2</span>) + Math.<span class="hljs-property">pow</span>(child.<span class="hljs-property">getY</span>() - <span class="hljs-variable">this</span>.<span class="hljs-property">start</span>[<span class="hljs-number">0</span>], <span class="hljs-number">2</span>)));
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>child.<span class="hljs-property">setH</span>((<span class="hljs-type">int</span>)(Math.<span class="hljs-property">pow</span>(<span class="hljs-variable">this</span>.<span class="hljs-property">goal</span>[<span class="hljs-number">1</span>] - child.<span class="hljs-property">getX</span>(), <span class="hljs-number">2</span>) + Math.<span class="hljs-property">pow</span>(<span class="hljs-variable">this</span>.<span class="hljs-property">goal</span>[<span class="hljs-number">0</span>] - child.<span class="hljs-property">getY</span>(), <span class="hljs-number">2</span>)));
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>child.<span class="hljs-property">setF</span>(child.<span class="hljs-property">getG</span>() + child.<span class="hljs-property">getH</span>());
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-keyword">for</span> (Node openNode : openList) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="hljs-keyword">if</span> (openNode.<span class="hljs-property">equals</span>(child) &amp;&amp; child.<span class="hljs-property">getG</span>() &gt; openNode.<span class="hljs-property">getG</span>()) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span><span class="bg-blue-200">    </span><span class="hljs-keyword">continue</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="bg-green-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>}
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span>openList.<span class="hljs-property">add</span>(child);
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="bg-yellow-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">stage_anser</span>[child.<span class="hljs-property">getY</span>()][child.<span class="hljs-property">getX</span>()] = <span class="hljs-number">4</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>}
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-comment">//reconstructPath(out);</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">return</span>;
}4:T20c6,<span class="hljs-comment">// ノードクラス（迷路上のセルを表す）</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> {
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> Node parent;
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x, y; <span class="hljs-comment">// representing the position as (x, y)</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> g; <span class="hljs-comment">// スタートからの移動コスト値</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> h; <span class="hljs-comment">// 仮に見積もったコスト値</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> f; <span class="hljs-comment">// 合計コスト</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span>(Node parent, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">parent</span> = parent;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">x</span> = x;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">y</span> = y;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">g</span> = <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">h</span> = <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">f</span> = <span class="hljs-number">0</span>;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-comment">// Getters and setters for the fields</span>
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getParent</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> parent;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParent</span>(Node parent) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">parent</span> = parent;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> x;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setX</span>(<span class="hljs-type">int</span> x) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">x</span> = x;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getY</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> y;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setY</span>(<span class="hljs-type">int</span> y) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">y</span> = y;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getG</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> g;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setG</span>(<span class="hljs-type">int</span> g) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">g</span> = g;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getH</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> h;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setH</span>(<span class="hljs-type">int</span> h) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">h</span> = h;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getF</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> f;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setF</span>(<span class="hljs-type">int</span> f) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-variable">this</span>.<span class="hljs-property">f</span> = f;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span>@Override
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span>(<span class="hljs-built_in">Object</span> obj) {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (<span class="hljs-variable">this</span> == obj) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span> || <span class="hljs-title function_">getClass</span>() != obj.<span class="hljs-property">getClass</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span>Node node = (Node) obj;
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> x == node.<span class="hljs-property">x</span> &amp;&amp; y == node.<span class="hljs-property">y</span>;
<span class="bg-red-200">    </span>}
<span class="bg-red-200">    </span>@Override
<span class="bg-red-200">    </span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span>() {
<span class="bg-red-200">    </span><span class="bg-pink-200">    </span><span class="hljs-keyword">return</span> Objects.<span class="hljs-property">hash</span>(x, y);
<span class="bg-red-200">    </span>}
}0:["ASCinIGn5fDTwkYMyLTSq",[[["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],["",{"children":["__PAGE__",{},["$L1",[["$","div",null,{"className":"mb-4 text-2xl border-b border-gray-500 pb-2","children":"情報科学応用 最終課題 説明"}],["$","div",null,{"id":"description","children":[["$","h2",null,{"children":"ゲーム概要"}],["$","p",null,{"children":"3Dで迷路の中を自由に探索することができる"}],["$","p",null,{"children":"ゲーム開始～ゴール地点に到達 までを測るタイマーがあり、タイムを競うことができる"}],["$","p",null,{"children":"通った道の履歴がわかり、ゴール後、最短経路との比較ができる"}],["$","h2",null,{"children":"操作方法"}],["$","p",null,{"children":"WASDで前後左右"}],["$","p",null,{"children":"JLで視点の左右"}],["$","h2",null,{"children":"迷路生成について"}],["$","h3",null,{"children":"穴掘り法"}],["$","p",null,{"children":"迷路作成には穴掘り法を使った"}],["$","p",null,{"children":"穴掘り方は、次のようにして迷路を生成する"}],["$","ul",null,{"className":"list-decimal ml-8","children":[["$","li",null,{"children":"奇数✕奇数の範囲の迷路の領域をすべて壁で埋め尽くす。"}],["$","li",null,{"children":"ランダムな場所から「穴を掘る」。このプログラムでは（1,1）から2ます「穴を掘る」。"}],["$","li",null,{"children":"作った穴から、まだ掘っていない方向にランダムに「新しい穴を掘る」。"}],["$","li",null,{"children":"進めなくなったら進める箇所まで戻って、まだ掘っていない方向にランダムに「新しい穴を掘る」。"}],["$","li",null,{"children":"3のプロセスを繰り返し、穴が繋がって迷路が完成するまで続ける。"}]]}],["$","div",null,{"children":["$","details",null,{"className":"","children":[["$","summary",null,{"className":"sm:-mb-4 mt-4 group hover:underline ","children":["maze_generation.pde の一部",["$","span",null,{"className":"text-right inline-block w-full sm:-translate-y-7 group hover:underline","children":"クリックで開閉"}]]}],["$","div",null,{"children":["$","pre",null,{"className":"mb-4 p-2 border rounded-lg overflow-x-auto border-gray-700","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$2"}}]}]}]]}]}],["$","div",null,{"className":"flex flex-wrap gap-x-8 gap-y-2","children":[["$","div",null,{"children":[["$","p",null,{"children":"コード参考1 | Algoful"}],["$","a",null,{"href":"https://algoful.com/Archive/Algorithm/MazeDig","target":"_blank","rel":"noopener noreferrer","className":"block p-2 mx-2 text-gray-900 transition hover:text-orange-400 underline hover:underline-offset-1","children":"迷路生成(穴掘り法)…"}]]}],["$","div",null,{"children":[["$","p",null,{"children":"コード参考2 | Qiita@naru_1017"}],["$","a",null,{"href":"https://qiita.com/naru_1017/items/e4d017433372a313aeb3","target":"_blank","rel":"noopener noreferrer","className":"block p-2 mx-2 text-gray-900 transition hover:text-orange-400 underline hover:underline-offset-1","children":"穴掘り法を使って…"}]]}]]}],["$","h3",null,{"children":"A*（A-star）"}],["$","p",null,{"children":"迷路の最短経路の探索にはA*（A-star）アルゴリズムを使った"}],["$","p",null,{"children":"A*アルゴリズムは、次のようにして探索する"}],["$","ul",null,{"className":"list-decimal ml-8","children":[["$","li",null,{"children":"始点ノードをオープンリストに挿入する"}],["$","li",null,{"children":"オープンリストからコストが最小のノードを取り出し、それを現在地とする"}],["$","li",null,{"children":"現在地が目的地なら終了。そうでなければ現在地から接続している未探索のノードをオープンリストに挿入する"}],["$","li",null,{"children":"2,3のプロセスを繰り返す"}]]}],["$","p",null,{"children":"コスト関数は以下の式で計算する。"}],["$","div",null,{"children":["$","pre",null,{"className":"mb-4 p-2 border rounded-lg overflow-x-auto border-gray-700","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"f(n) = g(n) + h(n)"}}]}]}],["$","p",null,{"children":"ここで、"}],["$","p",null,{"children":"g(n): 始点からノードnへの実コスト(移動に要したコスト)"}],["$","p",null,{"children":"h(n): ノードnから推定される目的地へのコスト"}],["$","p",null,{"children":"このコードではゴール位置がわかっているためh(n)は直線距離としている"}],["$","div",null,{"children":["$","details",null,{"className":"","children":[["$","summary",null,{"className":"sm:-mb-4 mt-4 group hover:underline ","children":["maze_generation.pde の一部",["$","span",null,{"className":"text-right inline-block w-full sm:-translate-y-7 group hover:underline","children":"クリックで開閉"}]]}],["$","div",null,{"children":["$","pre",null,{"className":"mb-4 p-2 border rounded-lg overflow-x-auto border-gray-700","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$3"}}]}]}],["$","div",null,{"children":["$","pre",null,{"className":"mb-4 p-2 border rounded-lg overflow-x-auto border-gray-700","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$4"}}]}]}]]}]}],["$","div",null,{"className":"flex flex-wrap gap-x-8 gap-y-2","children":["$","div",null,{"children":[["$","p",null,{"children":"コード参考1"}],["$","a",null,{"href":"https://stone-program.com/python/algorithm/a-star-introduction/","target":"_blank","rel":"noopener noreferrer","className":"block p-2 mx-2 text-gray-900 transition hover:text-orange-400 underline hover:underline-offset-1","children":"簡単なA* （A star）…"}]]}]}],["$","h2",null,{"children":"迷路の3D描画について"}],["$","p",null,{"children":"レイキャスティングという手法で、2Dの迷路情報とプレイヤーの現在地点と視点情報から、決め打ちで高さを描画している"}],["$","div",null,{"className":"flex flex-wrap gap-x-8 gap-y-2","children":[["$","div",null,{"children":[["$","p",null,{"children":"コード参考1 | YouTube"}],["$","a",null,{"href":"https://youtu.be/Mtf4rz9UEQo?t=137","target":"_blank","rel":"noopener noreferrer","className":"block p-2 mx-2 text-gray-900 transition hover:text-orange-400 underline hover:underline-offset-1","children":"高校数学とJavaScript…"}]]}],["$","div",null,{"children":[["$","p",null,{"children":"コード参考2 | scratch"}],["$","a",null,{"href":"https://scratch.coach/lesson/easy-raycasting001/","target":"_blank","rel":"noopener noreferrer","className":"block p-2 mx-2 text-gray-900 transition hover:text-orange-400 underline hover:underline-offset-1","children":"スクラッチゲームを3D…"}]]}]]}]]}]],null]]},[null,["$","html",null,{"lang":"ja","children":[["$","head",null,{"children":["$","$L5",null,{}]}],["$","body",null,{"className":"__className_579ea0 relative flex min-h-screen flex-col","children":[["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{"children":["$","$L8",null,{}]}],"templateStyles":[],"templateScripts":[],"notFound":["$","div",null,{"className":"text-center","children":[["$","h1",null,{"className":"block text-7xl font-bold text-gray-800 sm:text-9xl ","children":"404"}],["$","h1",null,{"className":"block text-2xl font-bold text-white"}],["$","p",null,{"className":"mt-3 text-gray-600 ","children":"おっと、何かがうまくいきませんでした。"}],["$","p",null,{"className":"text-gray-600 ","children":"申し訳ありませんが、ページが見つかりませんでした。"}],["$","div",null,{"className":"mt-5 flex flex-col items-center justify-center gap-2 sm:flex-row sm:gap-3","children":["$","$L9",null,{"className":"inline-flex w-full items-center justify-center gap-x-2 rounded-lg border border-transparent px-4 py-3 text-sm font-semibold text-blue-600 hover:text-blue-800 disabled:pointer-events-none disabled:opacity-50 sm:w-auto ","href":"/","children":[["$","svg",null,{"className":"h-4 w-4 flex-shrink-0","xmlns":"http://www.w3.org/2000/svg","width":"24","height":"24","viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round","children":["$","path",null,{"d":"m15 18-6-6 6-6"}]}],"ホームに戻る"]}]}]]}],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/260277p/maze_solver_3d/_next/static/css/5c3da54741072322.css","precedence":"next","crossOrigin":""}]]}],["$","footer",null,{"className":"mx-auto mt-auto w-full max-w-[85rem] border-t-2 border-gray-400 px-4 py-10 sm:px-6 lg:px-8","children":["$","div",null,{"className":"text-center","children":[["$","$L9",null,{"href":"/","className":"mx-auto block max-w-fit p-3 text-xl font-semibold text-black","children":"Maze Solver 3D - 1260277"}],["$","div",null,{"className":"m-3 text-gray-500","children":["2024 高知工科大学 情報学群 浅野友哉 1260277.",["$","span",null,{"className":"pl-2","children":"|"}],["$","a",null,{"href":"https://github.com/mosunset/maze_solver_3d","target":"_blank","rel":"noopener noreferrer","className":"p-4 pl-2 font-semibold text-blue-600 transition hover:text-orange-400 hover:underline hover:underline-offset-1","children":"GitHub"}]]}]]}]}]]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/260277p/maze_solver_3d/_next/static/css/499bbea0d1092bb3.css","precedence":"next","crossOrigin":""}]],"$La"]]]]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Maze Solver 3D - 1260277"}],["$","meta","3",{"name":"description","content":"情報科学応用最終課題説明ページ - Processingで作った3D迷路ゲームの解説"}],["$","link","4",{"rel":"icon","href":"/260277p/maze_solver_3d/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
